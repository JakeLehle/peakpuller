
# abort if no config is set
if len(config) == 0:

    raise ValueError('config not set, make sure to run snakemake with config file')

snakemake_dir = sys.path[0]
conda_env_dir = snakemake_dir + '/envs'

output_dir = config['output_dir']
caper_dir = output_dir + '/caper'
croo_dir = output_dir + '/croo'
log_dir = output_dir + '/log'

num_threads = config['computing_threads']
io_threads = config['io_threads']

target_files = [ output_dir + '/' + outfile for outfile in config['target_files']]
temp_dir = config['temp_dir']

rule all:
    input:
        target_files


### CRPOMWELL

rule prep_caper_json:
    output:
        caper_dir + '/peakpuller.json'
    params:
        caper_dir = caper_dir,
        chip_title = config['experiment_title'],
        chip_description = config['experiment_description'],
        chip_genome_tsv = config['genome_tsv'],
        chip_pipeline_type = config['transcription_factor_or_histone_chip'],
        aligner = config['aligner'],
        duplication_marker = config['duplication_marker'],
        computing_threads = config['computing_threads'],
        control_reads_are_paired = config['control_reads_are_paired_end'],
        always_use_pooled_ctl = config['always_use_pooled_ctl'],
        control_rep1_R1 = config['control_rep1_R1'],
        control_rep2_R1 = config['control_rep2_R1'],
        exp_reads_are_paired = config['experimental_reads_are_paired_end'],
        exp_rep1_R1 = config['experimental_rep1_R1'],
        exp_rep2_R1 = config['experimental_rep2_R1'] 
    conda:
        conda_env_dir + '/r.yaml'
    script:
        'scripts/prep_caper_json.R'

rule caper:
    input:
        rules.prep_caper_json.output
    output:
        caper_dir + '/metadata.json'
    log:
        caper_out = log_dir + '/caper.log',
        cromwell_out = log_dir + '/cromwell.out'
    conda:
        conda_env_dir + '/caper.yaml'   
    shell:
        """
        caper init local
        caper run -i {input} --out-dir {caper_dir} -m {output} --cromwell-stdout {log.cromwell_out} chip.wdl --docker 2> {log.caper_out}
        """

rule croo:
    input: 
        rules.caper.output
    output:
        croo_dir + '/qc/qc.json'
    conda:
        conda_env_dir + '/croo.yaml'
    shell:
        """
        croo --out-def-json chip.croo.v5.json --out-dir {croo_dir} {input} 
        """

rule qc_metrics:
    input: 
        rules.croo.output
    output:
        croo_dir + '/spreadsheet.tsv'
    conda:
        conda_env_dir + '/r.yaml'
    script:
        'scripts/qc_metrics.R'
